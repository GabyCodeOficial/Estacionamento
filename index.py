import sqlite3
import datetime
import re








class Estacionamento:
  def __init__(self):
      """Inicializa conex√£o com o banco de dados e cria tabelas."""
      self.conn = sqlite3.connect("estacionamento.db")
      self.cursor = self.conn.cursor()
      self.criar_tabelas()




  def criar_tabelas(self):
      """Cria as tabelas no banco de dados."""
      self.cursor.execute("""
          CREATE TABLE IF NOT EXISTS clientes_mensalistas (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              nome TEXT,
              placa TEXT UNIQUE,
              modelo TEXT,
              cor TEXT,
              mensalidade REAL DEFAULT 300.00
          )
      """)




      self.cursor.execute("""
          CREATE TABLE IF NOT EXISTS veiculos_estacionados (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              nome TEXT,
              placa TEXT UNIQUE,
              modelo TEXT,
              cor TEXT,
              entrada TEXT
          )
      """)
      self.cursor.execute("""
          CREATE TABLE IF NOT EXISTS registro_historico_saidas (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              nome TEXT,
              placa TEXT,
              modelo TEXT,
              cor TEXT,
              entrada TEXT,
              saida TEXT,
              valor_pago REAL
          )
      """)




      self.conn.commit()




  def validar_placa(self, placa):
      """Valida se a placa segue o formato tradicional ou Mercosul do Brasil."""
      # Regex abrangente para placas brasileiras (tradicional e Mercosul)
      padrao = r'^[A-Z]{3}-?[0-9]{4}$|^[A-Z]{3}[0-9][A-Z][0-9]{2}$'
      return re.match(padrao, placa) is not None




  def validar_nome(self, nome):
      """Verifica se o nome cont√©m mais de uma palavra e se cada palavra come√ßa com mai√∫scula."""
      palavras = nome.split()
      if len(palavras) < 2:
          return False
      return all(palavra.istitle() and palavra.isalpha() for palavra in palavras)




  def cadastrar_cliente_mensalista(self):
      """Registra um novo cliente mensalista no banco de dados."""
      print("\n‚ú® **CADASTRO DE MENSALISTA** ‚ú®")
      print("---------------------------------")
      nome = input("üë§ Nome completo (ou 'v' para voltar): ")
      if nome.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      if not self.validar_nome(nome):
          print("üö´ Nome inv√°lido! üí° Dica: Use nome e sobrenome, com iniciais mai√∫sculas.")
          return




      placa = input("üöó Placa do ve√≠culo (ou 'v' para voltar): ")
      if placa.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      if not self.validar_placa(placa):
          print("‚ùå Placa incorreta! üí° Dica: Formato ABC1234 ou ABC1D23.")
          return




      modelo = input("üöò Modelo do ve√≠culo (ou 'v' para voltar): ")
      if modelo.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      cor = input("üåà Cor do ve√≠culo (ou 'v' para voltar): ")
      if cor.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return




      try:
          self.cursor.execute("INSERT INTO clientes_mensalistas (nome, placa, modelo, cor) VALUES (?, ?, ?, ?)",
                              (nome, placa, modelo, cor))
          self.conn.commit()
          print(f"‚úÖ Cliente **{nome}** cadastrado como mensalista! Bem-vindo(a)! üéâ")
      except sqlite3.IntegrityError:
          print("‚ö†Ô∏è Essa placa j√° est√° cadastrada para um mensalista!")




  def registrar_entrada(self):
      """Registra a entrada de um ve√≠culo no estacionamento."""
      print("\n‚û°Ô∏è **REGISTRO DE ENTRADA** ‚û°Ô∏è")
      print("-----------------------------")
      nome = input("üë§ Nome completo (ou 'v' para voltar): ")
      if nome.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      if not self.validar_nome(nome):
          print("üö´ Nome inv√°lido! üí° Dica: Use nome e sobrenome, com iniciais mai√∫sculas.")
          return




      placa = input("üöó Placa do ve√≠culo (ou 'v' para voltar): ")
      if placa.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      if not self.validar_placa(placa):
          print("‚ùå Placa incorreta! üí° Dica: Formato ABC1234 ou ABC1D23.")
          return




      modelo = input("üöò Modelo do ve√≠culo (ou 'v' para voltar): ")
      if modelo.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      cor = input("üåà Cor do ve√≠culo (ou 'v' para voltar): ")
      if cor.lower() == "v":
          print("‚Ü©Ô∏è Voltando ao menu.")
          return
      entrada = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")




      self.cursor.execute("SELECT * FROM clientes_mensalistas WHERE placa=?", (placa,))
      cliente_mensalista = self.cursor.fetchone()




      try:
          self.cursor.execute("INSERT INTO veiculos_estacionados (nome, placa, modelo, cor, entrada) VALUES (?, ?, ?, ?, ?)",
                              (nome, placa, modelo, cor, entrada))
          self.conn.commit()
          if cliente_mensalista:
              print(f"‚úÖ Entrada de **{nome}** (placa: {placa}) registrada. Cliente mensalista! üÖøÔ∏è")
          else:
              print(f"‚úÖ Entrada de **{nome}** (placa: {placa}) registrada. Cliente avulso. ‚è±Ô∏è")
      except sqlite3.IntegrityError:
          print("üö® Opa! Este ve√≠culo j√° est√° estacionado no momento.")




  def registrar_saida(self):
      """Registra a sa√≠da de um ve√≠culo, movendo-o para o hist√≥rico e calculando valores se necess√°rio."""
      while True: # Loop para permitir que o usu√°rio tente novamente
          print("\n‚¨ÖÔ∏è **REGISTRO DE SA√çDA** ‚¨ÖÔ∏è")
          print("----------------------------")
          placa = input("üöó Placa do ve√≠culo (ou 'v' para voltar): ")
          if placa.lower() == "v":
              print("‚Ü©Ô∏è Voltando ao menu.")
              return




          self.cursor.execute("SELECT * FROM veiculos_estacionados WHERE placa=?", (placa,))
          dados_veiculo = self.cursor.fetchone()




          if not dados_veiculo:
              print("ü§∑‚Äç‚ôÇÔ∏è Este ve√≠culo n√£o est√° registrado como estacionado aqui agora.")
              continue # Volta para o in√≠cio do loop para tentar outra placa




          # Exibir informa√ß√µes do ve√≠culo para confirma√ß√£o
          print("\n--- **DETALHES DO VE√çCULO PARA SA√çDA** ---")
          print(f"Nome: {dados_veiculo[1]}")
          print(f"Placa: {dados_veiculo[2]}")
          print(f"Modelo: {dados_veiculo[3]}")
          print(f"Cor: {dados_veiculo[4]}")
          print(f"Entrada: {dados_veiculo[5]}")




          confirmacao = input("Confirmar sa√≠da deste ve√≠culo? (s/n): ").lower()




          if confirmacao == 's':
              saida = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              valor_total = 0.0




              self.cursor.execute("SELECT * FROM clientes_mensalistas WHERE placa=?", (placa,))
              cliente_mensalista = self.cursor.fetchone()




              if cliente_mensalista:
                  print("ü•≥ Cliente **mensalista**! Nenhuma cobran√ßa. Dirija com seguran√ßa! üëã")
                  valor_total = 0.0
              else:
                  entrada_str = dados_veiculo[5]
                  entrada = datetime.datetime.strptime(entrada_str, "%Y-%m-%d %H:%M:%S")
                  tempo_estacionado = (datetime.datetime.now() - entrada).total_seconds() / 3600
                  preco_por_hora = 10
                  valor_total = round(tempo_estacionado * preco_por_hora, 2)
                  print(f"üí∏ Cliente **avulso**! Tempo: {tempo_estacionado:.2f}h. Valor a pagar: **R${valor_total:.2f}**")




              try:
                  self.cursor.execute("INSERT INTO registro_historico_saidas (nome, placa, modelo, cor, entrada, saida, valor_pago) VALUES (?, ?, ?, ?, ?, ?, ?)",
                                      (dados_veiculo[1], dados_veiculo[2], dados_veiculo[3], dados_veiculo[4], dados_veiculo[5], saida, valor_total))
                  self.conn.commit()
                  print("üìã Sa√≠da registrada no hist√≥rico. Obrigado(a)! ‚ú®")
              except sqlite3.IntegrityError as e:
                  print(f"üö® Erro ao registrar sa√≠da no hist√≥rico: {e}")




              self.cursor.execute("DELETE FROM veiculos_estacionados WHERE placa=?", (placa,))
              self.conn.commit()
              print(f"‚úÖ Ve√≠culo **{placa}** saiu! Vaga liberada. üöÄ")
              break # Sai do loop ap√≥s a sa√≠da ser confirmada e processada
          elif confirmacao == 'n':
              print("‚ùå Sa√≠da n√£o confirmada. Por favor, tente novamente com os dados corretos.")
              # O loop 'while True' far√° com que o programa solicite a placa novamente
          else:
              print("Op√ß√£o inv√°lida. Digite 's' para sim ou 'n' para n√£o.")
              # O loop 'while True' far√° com que o programa solicite a placa novamente




  def contar_veiculos_estacionados(self):
      """Conta quantos ve√≠culos ainda est√£o estacionados."""
      self.cursor.execute("SELECT COUNT(*) FROM veiculos_estacionados")
      total = self.cursor.fetchone()[0]
      print(f"\nüÖøÔ∏è **VAGAS OCUPADAS**: {total} ve√≠culos. üöóüí®")




# --- Rodando o Sistema ---
if __name__ == "__main__":
  estacionamento = Estacionamento()
  while True:
      print("\n" + "="*30)
      print("üåü ESTACIONAMENTO DE VEICULOS üåü")
      print("="*30)
      print("1Ô∏è‚É£ Cadastrar Cliente Mensalista")
      print("2Ô∏è‚É£ Registrar Entrada de Ve√≠culo")
      print("3Ô∏è‚É£ Registrar Sa√≠da de Ve√≠culo")
      print("4Ô∏è‚É£ Ver Vagas Ocupadas")
      print("5Ô∏è‚É£ Sair do Sistema")
      print("="*30)




      opcao = input("üëâ Escolha sua op√ß√£o (1-5): ")




      if opcao == "1":
          estacionamento.cadastrar_cliente_mensalista()
      elif opcao == "2":
          estacionamento.registrar_entrada()
      elif opcao == "3":
          estacionamento.registrar_saida()
      elif opcao == "4":
          estacionamento.contar_veiculos_estacionados()
      elif opcao == "5":
          print("\nüëã **SAINDO DO SISTEMA...** üëã")
          print("üöóüí® Agradecemos a prefer√™ncia! Volte sempre!")
          break
      else:
          print("ü§î Op√ß√£o inv√°lida! Por favor, digite um n√∫mero de 1 a 5.")

